// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/SecretFile.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecretFileClient is a mock of SecretFileClient interface.
type MockSecretFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretFileClientMockRecorder
}

// MockSecretFileClientMockRecorder is the mock recorder for MockSecretFileClient.
type MockSecretFileClientMockRecorder struct {
	mock *MockSecretFileClient
}

// NewMockSecretFileClient creates a new mock instance.
func NewMockSecretFileClient(ctrl *gomock.Controller) *MockSecretFileClient {
	mock := &MockSecretFileClient{ctrl: ctrl}
	mock.recorder = &MockSecretFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretFileClient) EXPECT() *MockSecretFileClientMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockSecretFileClient) Exists(p string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSecretFileClientMockRecorder) Exists(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSecretFileClient)(nil).Exists), p)
}

// Read mocks base method.
func (m *MockSecretFileClient) Read(p string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSecretFileClientMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSecretFileClient)(nil).Read), p)
}
